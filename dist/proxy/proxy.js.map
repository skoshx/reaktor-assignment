{"version":3,"sources":["proxy.ts"],"names":[],"mappings":";AAwDA,aAnDA,IAAA,EAAA,EAAA,QAAA,YACA,EAAA,EAAA,QAAA,QAkDA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAhDA,MAAM,EAAoB,yCACpB,EAAuB,MAAwB,iBAAiC,IAChF,EAA2B,MAA4B,qBAAqC,IAE5F,GAAM,EAAZ,EAAA,WACM,EAAO,QAAQ,IAAI,MAAQ,KAEjC,SAAS,EAAU,GACb,IACK,OAAA,KAAK,MAAM,GAClB,MAAO,GACA,OAAA,MAKX,EAAI,IAAI,CAAC,EAAK,EAAK,KACjB,EAAI,OAAO,8BAA+B,QAAQ,IAAI,QAAU,KAChE,EAAI,OAAO,+BAAgC,KAC3C,MAGF,MAAM,EAAc,MAAO,EAAkB,GAAY,UAC1C,GAAY,EAAI,EAAA,SAAA,EAAU,CAAE,QAAS,CAAwB,qBAAA,UAAa,EAAI,EAAA,SAAA,GAG7F,EAAI,IAAI,iCAAkC,MAAO,EAAK,KAC9C,MAAA,EAAe,EAAI,OAAO,aAC5B,IACI,MACA,EAAO,SADU,EAAY,EAAwB,GAAoD,QAArC,EAAI,OAAO,wBACrD,MAChC,EAAI,KAAK,GACT,MAAO,GACP,EAAI,KAAK,SAIb,EAAI,IAAI,wBAAyB,MAAO,EAAK,KACrC,MAAA,EAAU,EAAI,OAAO,QACvB,IACI,MACA,EAAO,SADU,EAAY,EAAoB,GAA+C,QAArC,EAAI,OAAO,wBAC5C,MAChC,EAAI,KAAK,GACT,MAAO,GACP,EAAI,KAAK,SAIb,EAAI,OAAO,EAAM,KACf,QAAQ,iCAAiC","file":"proxy.js","sourceRoot":"../../src/proxy","sourcesContent":["/**\n * A simple CORS proxy to access an API that doesn't\n * send CORS headers.\n */\n\nimport express from 'express';\nimport got from 'got';\n\nconst API_ENDPOINT_BASE = \"https://bad-api-assignment.reaktor.com\";\nconst getProductsEndpoint = (category: string) => `${API_ENDPOINT_BASE}/v2/products/${category}`;\nconst getAvailabilityEndpoint = (manufacturer: string) => `${API_ENDPOINT_BASE}/v2/availability/${manufacturer}`;\n\nconst app = express();\nconst port = process.env.PORT || 3001;\n\nfunction parseJSON(json: string): any | null {\n  try {\n    return JSON.parse(json);\n  } catch (e) {\n    return null;\n  }\n}\n\n// CORS\napp.use((req, res, next) => {\n  res.header(\"access-control-allow-origin\", process.env.ORIGIN || \"*\");\n  res.header(\"access-control-allow-headers\", \"*\");\n  next();\n});\n\nconst getResponse = async (endpoint: string, errorMode = false) => {\n  return await errorMode ? got(endpoint, { headers: { \"x-force-error-mode\": \"all\" } }) : got(endpoint);\n}\n\napp.get('/v2/availability/:manufacturer', async (req, res) => {\n  const manufacturer = req.params.manufacturer;\n  try {\n    const response = await getResponse(getAvailabilityEndpoint(manufacturer), req.header('x-force-error-mode') === \"all\")\n    const json = parseJSON(response.body);\n    res.json(json);\n  } catch (e: any) {\n    res.json(null);\n  }\n});\n\napp.get('/v2/products/:product', async (req, res) => {\n  const product = req.params.product;\n  try {\n    const response = await getResponse(getProductsEndpoint(product), req.header('x-force-error-mode') === \"all\")\n    const json = parseJSON(response.body);\n    res.json(json);\n  } catch (e: any) {\n    res.json(null);\n  }\n});\n\napp.listen(port, () => {\n  console.log(`Proxy server running on *:${port}`);\n});"]}